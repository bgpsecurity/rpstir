#!@PYTHON@

from threading import Thread, Lock
from subprocess import Popen
import atexit, getopt, sys, os, Queue, time, socket, subprocess, logging, commands
from random import randint

BLOCK_TIMEOUT = 1

aur_lock = Lock()
def run_aur(logger, rsync_log, repo_dir):
    aur_lock.acquire()
    logger.info("running AUR on %s" % rsync_log)
    p = Popen([
        "rsync_aur",
        "-s",
        "-t",
        "-f",
        rsync_log,
        "-d",
        repo_dir,
    ])
    p.wait()
    if p.returncode == 0:
        logger.info("AUR on %s succeeded" % rsync_log)
    else:
        logger.error("AUR failed with return code %s on %s" %
            (p.returncode, rsync_log))
    aur_lock.release()

#
# This class handles the RSYNC threads
#
class RSYNC_thread(Thread):
    def run(self):
        try:
            # The python queue is synchronized so this is safe
            nextURI = URIPool.get(True, BLOCK_TIMEOUT)
        except Queue.Empty:
            print "queue empty. %s " % self.getName()
            return
        cli = logging.getLogger('Thread: %s: ' % self.getName())
        while not nextURI=="" : #while a URI has been popped
            stderror = ""
            logFileName = (logDir + "/rsync_thread_%s.log") % (self.getName())
            rsync_log = ("%s/%s.%f" % (logDir,nextURI,time.time()))

            #build and run the rsync command. This may block for awhile but that
            #is the beauty of the multiple threads.
            rsyncCom = [rsyncDir,
                        "-Lirzts",
                        "--del",
                        #"--max-size=10K",
                        "--timeout=5",
                        "--contimeout=5",
                        "--no-motd",
                        "--",
                        "rsync://%s/" % nextURI,
                        "%s/%s" % (repoDir, nextURI)]

            cli.info( "starting %s" % nextURI )

            with open(rsync_log, 'w') as rsync_log_file:
                p = Popen(rsyncCom, stdout=rsync_log_file, stderr=subprocess.PIPE)
                stderror = p.communicate()[1]
                rcode = p.returncode

            cli.info( "%s had return code %s" % (nextURI, rcode) )
            if not stderror == "":
                cli.error( 'rsync returned errors: %s' % stderror )
            cli.info( ' '.join(rsyncCom) )

            if rcode == 0:
                run_aur(cli, rsync_log, os.path.join(repoDir, nextURI))

            else:
                # sleep, then re-run
                sleep_time = 5
                retry_count = 0
                while sleep_time < 300:
                    time.sleep(sleep_time + randint(-5,5))
                    #re-run the rsync command
                    with open(rsync_log, 'w') as rsync_log_file:
                        rcode = subprocess.call(rsyncCom, stdout=rsync_log_file)
                    retry_count += 1
                    if rcode == 0:
                        cli.info( (nextURI + " Retry %d return code: %d") %\
                                      (retry_count, rcode))
                        run_aur(cli, rsync_log, os.path.join(repoDir, nextURI))
                        break
                    else:
                        cli.error( (nextURI + " Retry %d return code: %d") %\
                                      (retry_count, rcode))
                    sleep_time *= 2

            #get next URI
            try:
                # The python queue is synchronized so this is safe
                nextURI = URIPool.get(True,BLOCK_TIMEOUT)
            except Queue.Empty:
                nextURI = ""
        cli.info('Thread %s: exiting with no more work to do' % self.getName())

#
# This function is the main thread controller. It spawns the
# maximum number of threads and waits for their completion
#
def thread_controller():
    threadPool = []
    # Start MAX threads and keep track of a reference to them
    if threadCount > URIPool.qsize():
        threadsToSpawn = URIPool.qsize()
    else:
        threadsToSpawn = threadCount
    for x in xrange ( threadsToSpawn ):
        thr = RSYNC_thread()
        thr.setName(x)
        thr.start()
        threadPool.append(thr)

    main.debug('Number of threads spawned: %d' % len(threadPool))

    notAliveCount = 0
    # while the last count of the dead threads is less than the number spawned
    while notAliveCount < threadsToSpawn :
        notAliveCount = 0
        time.sleep(5)
        for i in threadPool:
            if not i.isAlive():
                notAliveCount = notAliveCount + 1

    main.debug('Threads have all closed')


#
# Create log directories and/or rotate the logs
#
def rotate_logs(log_retention):
    #create the log directory if it doesn't exist
    if not os.path.exists(logDir):
        os.system("mkdir " + logDir)
    if not os.path.exists(repoDir):
        os.system("mkdir " + repoDir)

    #Rotate the main log for rsync_cord
    def log_file(number):
        if number == 0:
            return os.path.join(logDir, "rsync_cord.log")
        else:
            return os.path.join(logDir, "rsync_cord.log.%d" % number)
    num_logs = 0
    while os.path.exists(log_file(num_logs)):
        num_logs += 1
    if log_retention > 0:
        num_logs = min(num_logs, log_retention)
    for log_number in xrange(num_logs, 0, -1):
        os.rename(log_file(log_number - 1), log_file(log_number))

    #make directories for logs and repository locations
    for direc in dirs:
        d = os.path.dirname(logDir + "/" +  direc)
        if not os.path.exists(d):
            os.makedirs(d)
        d = os.path.dirname(repoDir + "/" + direc)
        if not os.path.exists(d):
            os.makedirs(d)

#
# Function that prints the usage of this script
#
def usage():
    print "rsync_cord [-h -c config] [--help] \n \
            \n \
            Arguments:\n \
            \t-c config\n \
                \t The config file that is to be used\n \
            \t-t threadcount\n \
                \t The maximum number of threads to spawn. Default is 8\n \
            \t-d\n \
                \t A debug flag to get extra output in the log file\n \
            \t--log-retention <n>\n \
                \t Keep only the most recent <n> logs. 0 keeps all logs\n \
            \t-h --help\n \
                \t   Shows this help information\n"


#Parse command line args
try:
    opts, args = getopt.getopt(sys.argv[1:], "hdc:t:", ["help", "log-retention="])
except getopt.GetoptError, err:
    # print help information and exit:
    print str(err) # will print something like "option -a not recoized"
    usage()
    sys.exit(2)

#Default variables
configFile = ""
threadCount = 8
debug = False
log_retention = 0

#Parse the options
for o, a in opts:
    if o in ("-h", "--help"):
        usage()
        sys.exit()
    elif o in ("-c"):
        configFile = a
    elif o in ("-t"):
        threadCount = int(a)
    elif o in ("-d"):
        debug = True
    elif o in ("--log-retention"):
        log_retention = int(a)
    else:
        print "unhandled option"
        sys.exit(1)

# If these main two arguments are not present, don't run
if configFile == "":
    print "You must specify the config file"
    sys.exit(1)

#parse config file and get various entries
try:
    configParse = open(configFile, "r")
except:
    print "Check permissions on your config file or that it exists"
    sys.exit(1)

lines = configParse.readlines()
dirs = ""
rsyncDir = ""
repoDir = ""
logDir = ""
sysName = ""
for line in lines:
    if line[:5] == "DIRS=":
        dirs = line[5:]
    elif line[:6] == "RSYNC=":
        rsyncDir = line[6:].strip('\n\";:')
    elif line[:11] == "REPOSITORY=":
        repoDir = line[11:].strip('\n\";:')
    elif line[:5] == "LOGS=":
        logDir = line[5:].strip('\n\";:')

#check for variables in the config file
if dirs == "":
    print "missing DIRS= variable in config"
    sys.exit(1)
if rsyncDir == "":
    print "missing RSYNC= variable in config"
    sys.exit(1)
if repoDir == "":
    print "missing REPOSITORY= variable in config"
    sys.exit(1)
if logDir == "":
    print "missing LOGS= variable in config"
    sys.exit(1)

if dirs.count(',') > 0:
    print "Commas in DIRS variable, Delimiter should be a space."
    sys.exit(1)
if dirs.count(';') > 0:
    print "Semicolons in DIRS variable, delimiter should be a space."
    sys.exit(1)

#Get at each URI in the dirs= element of the config file
URIPool = Queue.Queue(0)
eachDir = (dirs.strip('\"\'').strip('\n').strip('\"\'')).split(' ')

#fill in the queue
dirs = []
for direc in eachDir:
    if not direc == '':
        dirs.append(direc)
        URIPool.put(direc)

#log rotation
rotate_logs(log_retention)

#Set up logging
if debug:
    requested_log_level = logging.DEBUG
else:
    requested_log_level = logging.INFO
logging.basicConfig(level=requested_log_level,
	format='%(asctime)-21s %(levelname)-5s %(name)-19s %(message)s',
	datefmt='%d-%b-%Y-%H:%M:%S',
	filename='%s/rsync_cord.log' % (logDir),
	filemode='w')

#Generate the debug logger
main = logging.getLogger('main')
main.debug('This will process %d URI\'s from %s' % (len(dirs), configFile))

#launch the threads
if URIPool.qsize() == 0:
    print "You don't have any URI's to RSYNC with"
    sys.exit(1)
elif URIPool.qsize() == 1:
    main.warn('The URI list only has 1 URI.')

thread_controller()
