#!@SHELL_BASH@ -e
#

@SETUP_ENVIRONMENT@


# option parsing
usage () {
	echo >&2 "Usage: $0 [<option> ...]"
	echo >&2
	echo >&2 "Synchronize @PACKAGE_NAME@'s local cache with the global RPKI."
	echo >&2
	echo >&2 "Options:"
	echo >&2 "    -h        Print this help message."
}

while getopts h opt; do
	case "$opt" in
		h)
			usage
			exit 0
			;;
	esac
done
shift $((OPTIND - 1))
if test $# -ne 0; then
	usage_fatal "$0 doesn't take any arguments"
fi


# logging
SYNCHRONIZE_LOG="`config_get LogDir`/synchronize.log"

touch "$SYNCHRONIZE_LOG"

log () {
	echo "`date`" "$@" >> "$SYNCHRONIZE_LOG"
	echo "$@" >&2
}


# Check for the latest version.
#CONFIG_NEW_VERSION_CHECK="`config_get NewVersionCheck`"
#if test "$CONFIG_NEW_VERSION_CHECK" != none; then
#	VERSION_FILE="`@MKTEMP@`"
#	if curl \
#		--cacert "`config_get NewVersionCheckCACert`" \
#		--location \
#		--max-time 10 \
#		--output "$VERSION_FILE" \
#		"$CONFIG_NEW_VERSION_CHECK"
#	then
#		LATEST_VERSION="$(head -n 1 "$VERSION_FILE")"
#		if test "@PACKAGE_VERSION@" != "$LATEST_VERSION"; then
#			log "A new version of @PACKAGE_NAME@, $LATEST_VERSION, is available."
#		fi
#	else
#		log "Can't download version information from $CONFIG_NEW_VERSION_CHECK"
#	fi
#	rm "$VERSION_FILE"
#fi
#unset CONFIG_NEW_VERSION_CHECK


# Update the trust anchors.
config_get TrustAnchorLocators | xargs -0 updateTA.py -d


# Synchronize everything else.
rcli -w -p &
LOADER_PID=$!
stop_loader () {
	kill "$LOADER_PID" || true # if it already quit, we don't care
	wait "$LOADER_PID" || true # rcli currently doesn't quit cleanly
}
trap stop_loader 0
sleep 1

BAD_URI_CHARS='['\''",;&(){}|<>!$`\\[:space:][:cntrl:]]\|\[\|\]'

DONE_LIST="`@MKTEMP@`" # URIs already fetched from or discarded
CUR_LIST="`@MKTEMP@`" # current set of URIs that we know about
ADDED_LIST="`@MKTEMP@`" # CUR_LIST minus DONE_LIST

chaser -s | sort > "$CUR_LIST"
cat "$CUR_LIST" > "$ADDED_LIST"

while test -s "$ADDED_LIST"; do
	RSYNC_CORD_CONF="`@MKTEMP@`"

	echo "RSYNC=\"`which rsync`\"" >> "$RSYNC_CORD_CONF"
	echo "REPOSITORY=\"`config_get RPKICacheDir`\"" >> "$RSYNC_CORD_CONF"
	echo "LOGS=\"`config_get LogDir`\"" >> "$RSYNC_CORD_CONF"

	DONE_URI=0
	printf "DIRS=\"" >> "$RSYNC_CORD_CONF"
	while read -r URI; do
		if printf "%s" "$URI" | grep -q "$BAD_URI_CHARS"; then
			log "Discarding URI: $URI"
		elif test -n "$URI"; then
			if test $DONE_URI -eq 0; then
				DONE_URI=1
			else
				printf " " >> "$RSYNC_CORD_CONF"
			fi
			CLEANED_URI="${URI#[rR][sS][yY][nN][cC]://}"
			CLEANED_URI="${CLEANED_URI%/}"
			printf "%s" "$CLEANED_URI" >> "$RSYNC_CORD_CONF"
		fi
	done < "$ADDED_LIST"
	echo "\"" >> "$RSYNC_CORD_CONF"

	rsync_cord.py -d -c "$RSYNC_CORD_CONF" \
		-t "`config_get DownloadConcurrency`" \
		--log-retention "`config_get LogRetention`"

	rm -f "$RSYNC_CORD_CONF"

	NEW_DONE_LIST="`@MKTEMP@`"
	cat "$DONE_LIST" "$ADDED_LIST" | sort | uniq > "$NEW_DONE_LIST"
	rm -f "$DONE_LIST"
	DONE_LIST="$NEW_DONE_LIST"
	unset NEW_DONE_LIST

	chaser -s | sort > "$CUR_LIST"

	comm -13 "$DONE_LIST" "$CUR_LIST" > "$ADDED_LIST"
done

rm -f "$DONE_LIST" "$CUR_LIST" "$ADDED_LIST"


# Run garbage collection.
garbage
